@inject IMatchService Matcher
<MudContainer>
    <MudGrid Class="d-flex align-content-center ma-4">
        <MudItem xs="12" sm="10">
            @if (ErrorMessage == null) {
                <MudAlert Severity="Severity.Info">Add your participants below and click Generate Links to get your shareable links!</MudAlert>
            }
            else {
                <MudAlert Severity="Severity.Error">@ErrorMessage</MudAlert>
            }
        </MudItem>
        <MudItem xs="12" sm="2" Class="d-flex align-content-center">
            <MudButton Color="Color.Success" Variant="Variant.Filled" @onclick="GeneratePairs" Disabled="!ReadyToGenerate">Generate Links</MudButton>
        </MudItem>
    </MudGrid>

    <MudPaper Class="pa-4 ma-4">
        @if (_participants.Any()) {
            <MudStack>
                @foreach (var participant in _participants) {
                    var idx = _participants.IndexOf(participant);
                    <MudCard>
                        <MudCardContent>
                            <MudText>Participant #@idx.ToHuman()</MudText>
                            <MudGrid>
                                <MudItem xs="12" sm="4">
                                    <MudTextField @bind-Value="participant.Name" HelperText="The name of the participant" Label="Name" Variant="Variant.Text"></MudTextField>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="participant.Notes" HelperText="Optional short message that will be shown to the person who draws this participant" Label="Notes" Variant="Variant.Text"></MudTextField>
                                </MudItem>
                                <MudItem xs="6" sm="1" Class="align-self-center">
                                    <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.PersonRemove" OnClick="@(() => ExclusionStates[idx] = !(ExclusionStates.GetValueOrDefault(idx, false)))" />
                                    <MudPopover Open="@ExclusionStates.GetValueOrDefault(idx, false)" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopRight" >
                                        <div class="d-flex flex-column pa-1">
                                            <ExclusionList Exclusions="participant.Exclusions"/>
                                        </div>
                                    </MudPopover>
                                </MudItem>
                                <MudItem xs="6" sm="1" Class="align-self-center">
                                    <MudIconButton Variant="Variant.Outlined" Color="Color.Warning" @onclick="@(() => RemoveParticipant(idx))" Icon="@Icons.Material.Filled.Delete" />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }
            </MudStack>
        }
        <MudTooltip Class="align-self-center" Style="align-self: center;" Text="To generate links you need at least 3 unique participants!">
            <MudButton Class="ma-4" Color="Color.Primary" Variant="Variant.Filled" @onclick="AddParticipant">Add Participant</MudButton>
        </MudTooltip>


    </MudPaper>
</MudContainer>


@code {

    public string? ErrorMessage { get; set; }
    private Dictionary<int, bool> ExclusionStates { get; } = new Dictionary<int, bool>();

    [Parameter]
    public List<Participant> Participants
    {
        get => _participants;
        set => _participants = value;
    }

    private List<Participant> _participants = new() { new Participant(string.Empty) };

    [Parameter]
    public EventCallback<Dictionary<Participant, Participant>> OnGenerate { get; set; }

    private void AddParticipant() {
        _participants.Add(new Participant());
    }

    private void RemoveParticipant(int index) {
        _participants.RemoveAt(index);
    }

    private async Task GeneratePairs() {
        ErrorMessage = null;
        try {
            var results = Matcher.GetPairs(_participants);
    // ReSharper disable once ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract
            if (results != null) {
                await OnGenerate.InvokeAsync(results);
                return;
            }
            ErrorMessage = "Could not generate matches for your participants! Check any exclusions and try again.";
        }
        catch (Exception e) {
            Console.WriteLine(e);
    // throw;
            ErrorMessage = "There was an error generating matches!";
        }
    }


    public bool ReadyToGenerate => _participants.Distinct(Participant.Comparer).Count() > 2 && _participants.All(p => !string.IsNullOrWhiteSpace(p.Name));

}